// clearfix
//
// forked from nicolasgallagher.com/micro-clearfix-hack/
//
%clearfix
  &:before, &:after
    content: " "
    display: table
  &:after
    clear: both

.clearfix
  @extend %clearfix


// responsive image
//
.img-responsive
  display: block
  max-width: 100%
  height: auto


// make content of a fixed container vertical scrollable
//
.scrollable
  overflow: scroll
  overflow-x: hidden
  -webkit-overflow-scrolling: touch


// transition mixin
//
@mixin transition($args...)
  -webkit-transition: $args
  -o-transition: $args
  transition: $args

// example: http://sassmeister.com/gist/thomd/ceed387a5777769f1049
.transition
  @include transition(all 0.4s ease)

.fade
  opacity: 0
  @include transition(opacity 0.4s ease)
  &.in
    opacity: 1


// @font-face mixin
// forked from github.com/thoughtbot/bourbon/
//
@mixin font-face($font-family, $file-path, $weight: normal, $style: normal)
  @font-face
    font-family: $font-family
    font-weight: $weight
    font-style: $style
    src: url('#{$file-path}.eot')
    src: url('#{$file-path}.eot?#iefix') format('embedded-opentype'),url('#{$file-path}.woff') format('woff'),url('#{$file-path}.ttf') format('truetype'),url('#{$file-path}.svg##{$font-family}') format('svg')

// example
@include font-face("foo", "/path/to/foo")
p
  font-family: foo, Helvetica, Arial, sans-serif


// ----- custom radio buttons ---------------------------------------------------------------------
//
// USAGE
//
//    HTML:
//
//       <div class="radio">
//          <input name="foo" value="foo1" id="foo-1" type="radio" checked />
//          <label for="foo-1">foo 1</label>
//       </div>
//
//    SASS:
//
//       .radio
//          @include radio
//

@mixin radio($selected-color: rgba(0, 0, 0, 0.9), $color: rgba(0, 0, 0, 0.3))
  input[type=radio]
    position: absolute
    left: 0
    top: 0
    width: 24px
    height: 24px
    overflow: hidden
    margin: 0
    padding: 0
    border: 0 none
    outline: 0 none
    opacity: 0
    cursor: pointer
    & + label
      padding-left: 24px
      position: relative
      display: block
      cursor: pointer
      width: 100%
      +transition(color 0.15s ease)
    & + label:before
      content: ''
      position: absolute
      left: 0
      top: 0
      background: 0% 0% transparent
      border-radius: 50%
      width: 14px
      height: 14px
      box-sizing: border-box
      border: 1px solid $color
      +transition(border-color 0.15s ease)
    &:checked + label
      color: $selected-color
    &:checked + label:before
      border-color: $selected-color
    &:checked + label:after
      content: ''
      position: absolute
      left: 4px
      top: 4px
      width: 6px
      height: 6px
      background: $selected-color
      border-radius: 50%
    &:hover + label:before
      border-color: $selected-color
    &:hover + label
      color: $selected-color
    &:disabled + label
      cursor: auto


//
// transparent background mixin
//

@mixin transparent-background($opacity: 0.9)
  &:before
    position: absolute
    top: 0
    left: 0
    content: ''
    background: #fff
    width: 100%
    height: 100%
    opacity: $opacity

// example
.my-text-container
  position: absolute
  width: 200px
  height: 100px
  @include transparent-background


// Convert angle
// @param {Number} $value - Value to convert
// @param {String} $unit - Unit to convert to
// @return {Number} Converted angle
@function convert-angle($value, $unit)
  $convertable-units: deg grad turn rad
  $conversion-factors: 1 10grad / 9deg 1turn / 360deg 3.14159rad / 180deg
  @if index($convertable-units, unit($value)) and index($convertable-units, $unit)
    @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit))
  @warn "Cannot convert `#{unit($value)}` to `#{$unit}`."

// Test if `$value` is an angle
// @param {*} $value - Value to test
// @return {Bool}
@function is-direction($value)
  $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value)
  $is-angle: type-of($value) == "number" and index("deg" "grad" "turn" "rad", unit($value))
  @return $is-direction or $is-angle

// Convert a direction to legacy syntax
// @param {Keyword | Angle} $value - Value to convert
// @require {function} is-direction
// @require {function} convert-angle
@function legacy-direction($value)
  @if is-direction($value) == false
    @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction"
  $conversion-map: (to top: bottom, to top right: bottom left, to right top: left bottom, to right: left, to bottom right: top left, to right bottom: left top, to bottom: top, to bottom left: top right, to left bottom: right top, to left: right, to left top: right bottom, to top left: bottom right)
  @if map-has-key($conversion-map, $value)
    @return map-get($conversion-map, $value)
  @return 90deg - convert-angle($value, "deg")

// Mixin printing a linear-gradient
// as well as a plain color fallback
// and the `-webkit-` prefixed declaration
// @access public
// @param {String | List | Angle} $direction - Linear gradient direction
// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...)
  @if is-direction($direction) == false
    $color-stops: $direction, $color-stops
    $direction: 180deg
  background: nth(nth($color-stops, 1), 1)
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops)
  background: linear-gradient($direction, $color-stops)


@mixin long-shadow($direction: 0, $length: 220)
  $shadows: null
  @for $i from 1 through $length
    $shadows: append($shadows, "#{$i}px #{$i}px #aa628d", comma)
  text-shadow: #{$shadows}
